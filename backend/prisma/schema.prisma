datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum OrganizationRole {
  OWNER 
  ADMIN
  TEAM_ADMIN
  SERVICE_MANAGER
  STATUS_REPORTER
  TEAM_MEMBER
  BILLING_MANAGER
  FREELANCER
}

enum ServiceStatus {
  OPERATIONAL
  DEGRADED_PERFORMANCE
  PARTIAL_OUTAGE
  MAJOR_OUTAGE
}

enum IncidentStatus {
  INVESTIGATING
  IDENTIFIED
  MONITORING
  RESOLVED
}

enum IncidentSeverity {
  MINOR
  MAJOR
  CRITICAL
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  ownerId   String   @map("owner_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  owner    User      @relation("OwnedOrganizations", fields: [ownerId], references: [id])
  services Service[]
  teams    Team[]

  @@index([ownerId])
  @@map("organizations")
}

model Team {
  id        String   @id @default(uuid())
  name      String
  organizationId     String   @map("organization_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members      TeamMember[]

  @@index([organizationId])
  @@map("teams")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  name            String
  authorizationId String   @unique @map("authorization_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  ownedOrganizations Organization[] @relation("OwnedOrganizations")
  teams              TeamMember[]

  @@index([authorizationId])
  @@map("users")
}

model TeamMember {
  id        String   @id @default(uuid())
  role      OrganizationRole  @default(TEAM_MEMBER)
  teamId    String   @map("team_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
  @@map("team_members")
}

model Service {
  id               String        @id @default(uuid())
  name             String
  description      String?
  currentStatus    ServiceStatus @default(OPERATIONAL) @map("current_status")
  uptimePercentage Float         @default(100.00) @map("uptime_percentage")
  organizationId            String        @map("organization_id")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  statusHistory  StatusHistory[]
  incidents      Incident[]

  @@index([organizationId])
  @@map("services")
}

model StatusHistory {
  id        String        @id @default(uuid())
  serviceId String        @map("service_id")
  status    ServiceStatus
  message   String?
  createdAt DateTime      @default(now()) @map("created_at")

  // Relations
  service   Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@map("status_history")
}

model Incident {
  id          String           @id @default(uuid())
  title       String
  description String
  severity    IncidentSeverity
  status      IncidentStatus
  serviceId   String          @map("service_id")
  startedAt   DateTime        @map("started_at")
  resolvedAt  DateTime?       @map("resolved_at")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  // Relations
  service   Service          @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  updates   IncidentUpdate[]

  @@index([serviceId])
  @@map("incidents")
}

model IncidentUpdate {
  id          String        @id @default(uuid())
  message     String
  status      IncidentStatus
  incidentId  String        @map("incident_id")
  createdAt   DateTime      @default(now()) @map("created_at")

  // Relations
  incident    Incident      @relation(fields: [incidentId], references: [id], onDelete: Cascade)

  @@index([incidentId])
  @@map("incident_updates")
}